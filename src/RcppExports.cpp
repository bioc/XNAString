// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// RNAfold_MFE
StringVector RNAfold_MFE(StringVector seq);
RcppExport SEXP _XNAString_RNAfold_MFE(SEXP seqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type seq(seqSEXP);
    rcpp_result_gen = Rcpp::wrap(RNAfold_MFE(seq));
    return rcpp_result_gen;
END_RCPP
}
// RNAcofold_MFE
StringVector RNAcofold_MFE(StringVector seq);
RcppExport SEXP _XNAString_RNAcofold_MFE(SEXP seqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type seq(seqSEXP);
    rcpp_result_gen = Rcpp::wrap(RNAcofold_MFE(seq));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_XNAString_RNAfold_MFE", (DL_FUNC) &_XNAString_RNAfold_MFE, 1},
    {"_XNAString_RNAcofold_MFE", (DL_FUNC) &_XNAString_RNAcofold_MFE, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_XNAString(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
